#!/bin/bash

set -e -u

### Globals:

declare -r svnroot=https://svn.code.sf.net/p/apertium/svn/
declare -ar pmodules=(trunk staging nursery incubator)
declare -ar lmodules=(languages incubator)


### Functions:
discover_url () {
    local -r dir=$1
    local url=
    local -a modules
    if [[ ${dir} = *-*-* ]]; then
        modules=( ${pmodules[@]} )
    else
        modules=( ${lmodules[@]} )
    fi
    for module in "${modules[@]}"; do
        url="${svnroot}${module}/${dir}"
        if svn info "${url}" &>/dev/null; then
            echo "Assuming SVN url of ${dir} is ${url}" >&2
            echo "${url}"
            return 0
        fi
    done
    echo "WARNING: Couldn't find SVN url of ${dir}" >&2
    return 1
}

get_dir () {
    local -r dir=$1
    local url=
    if [[ -d ${dir} ]]; then
        cd "${dir}"
        pwd
        svn up
        cd - >/dev/null
    else
        url=$(discover_url "${dir}")
        svn checkout "${url}"
    fi
}

get_data () {
    local -r pair=apertium-${1##apertium-}

    get_dir "${pair}"
    # Mac has ancient bash, so no declare -A for us
    declare -a deps=()
    declare -a depn=()
    while read -r n dep; do
        deps+=("${dep}")
        depn+=("${n}")
    done < <(awk -F'[][[:space:]]+' '/^ *AP_CHECK_LING\(/ && $2 && $4 {print $2, $4}' "${pair}"/configure.ac)

    if [[ ${#deps[@]} -ne 0 ]]; then
        for dep in "${deps[@]}"; do
            if get_dir "${dep}"; then
                cd "${dep}"
                pwd
                ./autogen.sh
                make -j3
                cd - >/dev/null
            else
                echo "WARNING: Skipping dependency ${dep}; pair ${pair} might not get set up correctly."
            fi
        done
    fi
    cd "${pair}"
    autogen="./autogen.sh "
    for i in "${!depn[@]}"; do
        autogen="${autogen} --with-lang${depn[i]}=../${deps[i]}"
    done
    ${autogen}
    make -j3
    make test || echo "make test failed, but that's probably fine."

    cat <<EOF

All done!

You can now "cd ${pair}" or one of the dependencies, edit some files
and type "make -j3 langs" to compile again.

EOF
}

show_help () {
        cat <<EOF
USAGE
       ${0##*/} PAIR
       ${0##*/} -l [MODULE...]

DESCRIPTION
       Run with just one argument, it will download and set up the
       Apertium development data for the specified language pair.

       With the -l option, it will list available language pairs. Give
       one or more MODULE arguments to list only pairs in that SVN
       module (one of "trunk", "staging", "nursery", "incubator").

OPTIONS
       -h          display this help and exit
       -l          list available packages instead of setting up data

EXAMPLES
       ${0##*/} nno-nob

       Download and set up apertium-nno-nob, along with its nno and
       nob dependencies.

       ${0##*/} -l trunk

       List available language pairs in SVN trunk.

       ${0##*/} -l | grep kaz

       List available language pairs involving Kazakh.
EOF
}

is_in () {
    local -r pattern="$1"
    local element
    shift

    for element; do
        [[ $element = $pattern ]] && return 0
    done
    return 1
}

list_pairs () {
    local -a modules=("$@")
    local module

    # Defaulting to all modules:
    if [[ ${#modules[@]} -eq 0 ]]; then
        modules=( ${pmodules[@]} )
    fi
    # Sanity-check input:
    for module in "${modules[@]}"; do
        if ! is_in "${module}" "${pmodules[@]}"; then
            echo "ERROR: '${module}' not recognised as an SVN language pair module"'!' >&2
            echo >&2
            show_help >&2
            exit 1
        fi
    done

    local url=
    for module in "${modules[@]}"; do
        echo "# Pairs in ${module}:"
        url="${svnroot}${module}/"
        svn ls "${url}" \
            | grep '^apertium-[[:alpha:]]\{2,3\}-[[:alpha:]]\{2,3\}/*$' \
            | sed 's%^apertium-%%; s%/$%%'
        echo
    done
}

main () {

    local do_list=false
    while getopts ":hl" opt; do
        case "$opt" in
            h)
                show_help
                exit 0
                ;;
            l)
                do_list=true
                ;;
            \?)
                echo "ERROR: Invalid option: -$OPTARG" >&2
                echo >&2
                show_help >&2
                exit 1
                ;;
        esac
    done
    shift "$((OPTIND-1))"

    if ${do_list}; then
        list_pairs "$@"
    else
        if [[ $# -ne 1 ]]; then
            echo "ERROR: No language pair specified." >&2
            echo >&2
            show_help >&2
            exit 1
        fi
        get_data "$@"
    fi
}

main "$@"
